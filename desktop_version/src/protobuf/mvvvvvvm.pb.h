// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mvvvvvvm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mvvvvvvm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mvvvvvvm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mvvvvvvm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mvvvvvvm_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mvvvvvvm_2eproto;
class PlayerStatus;
struct PlayerStatusDefaultTypeInternal;
extern PlayerStatusDefaultTypeInternal _PlayerStatus_default_instance_;
class TSave;
struct TSaveDefaultTypeInternal;
extern TSaveDefaultTypeInternal _TSave_default_instance_;
class World;
struct WorldDefaultTypeInternal;
extern WorldDefaultTypeInternal _World_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PlayerStatus* Arena::CreateMaybeMessage<::PlayerStatus>(Arena*);
template<> ::TSave* Arena::CreateMaybeMessage<::TSave>(Arena*);
template<> ::World* Arena::CreateMaybeMessage<::World>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class World final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:World) */ {
 public:
  inline World() : World(nullptr) {}
  ~World() override;
  explicit PROTOBUF_CONSTEXPR World(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  World(const World& from);
  World(World&& from) noexcept
    : World() {
    *this = ::std::move(from);
  }

  inline World& operator=(const World& from) {
    CopyFrom(from);
    return *this;
  }
  inline World& operator=(World&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const World& default_instance() {
    return *internal_default_instance();
  }
  static inline const World* internal_default_instance() {
    return reinterpret_cast<const World*>(
               &_World_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(World& a, World& b) {
    a.Swap(&b);
  }
  inline void Swap(World* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(World* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  World* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<World>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const World& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const World& from) {
    World::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(World* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "World";
  }
  protected:
  explicit World(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPlayerCountFieldNumber = 2,
    kMaxPlayerCountFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 playerCount = 2;
  void clear_playercount();
  int32_t playercount() const;
  void set_playercount(int32_t value);
  private:
  int32_t _internal_playercount() const;
  void _internal_set_playercount(int32_t value);
  public:

  // int32 maxPlayerCount = 3;
  void clear_maxplayercount();
  int32_t maxplayercount() const;
  void set_maxplayercount(int32_t value);
  private:
  int32_t _internal_maxplayercount() const;
  void _internal_set_maxplayercount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:World)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t playercount_;
    int32_t maxplayercount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mvvvvvvm_2eproto;
};
// -------------------------------------------------------------------

class TSave final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSave) */ {
 public:
  inline TSave() : TSave(nullptr) {}
  ~TSave() override;
  explicit PROTOBUF_CONSTEXPR TSave(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSave(const TSave& from);
  TSave(TSave&& from) noexcept
    : TSave() {
    *this = ::std::move(from);
  }

  inline TSave& operator=(const TSave& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSave& operator=(TSave&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSave& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSave* internal_default_instance() {
    return reinterpret_cast<const TSave*>(
               &_TSave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TSave& a, TSave& b) {
    a.Swap(&b);
  }
  inline void Swap(TSave* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TSave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TSave>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TSave& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TSave& from) {
    TSave::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSave* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSave";
  }
  protected:
  explicit TSave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldmapFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kCrewstatsFieldNumber = 3,
    kCollectFieldNumber = 4,
    kTeleportscriptFieldNumber = 15,
    kHardestroomFieldNumber = 26,
    kSummaryFieldNumber = 30,
    kSavexFieldNumber = 5,
    kSaveyFieldNumber = 6,
    kSaverxFieldNumber = 7,
    kSaveryFieldNumber = 8,
    kSavegcFieldNumber = 9,
    kSavedirFieldNumber = 10,
    kSavepointFieldNumber = 11,
    kTrinketsFieldNumber = 12,
    kCurrentsongFieldNumber = 13,
    kCompanionFieldNumber = 16,
    kLastsavedFieldNumber = 17,
    kScmprogressFieldNumber = 19,
    kFramesFieldNumber = 20,
    kSecondsFieldNumber = 21,
    kMinutesFieldNumber = 22,
    kShowtargetsFieldNumber = 14,
    kSupercrewmateFieldNumber = 18,
    kFinalmodeFieldNumber = 28,
    kFinalstretchFieldNumber = 29,
    kHoursFieldNumber = 23,
    kDeathcountsFieldNumber = 24,
    kTotalflipsFieldNumber = 25,
    kHardestroomdeathsFieldNumber = 27,
  };
  // repeated bool worldmap = 1;
  int worldmap_size() const;
  private:
  int _internal_worldmap_size() const;
  public:
  void clear_worldmap();
  private:
  bool _internal_worldmap(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_worldmap() const;
  void _internal_add_worldmap(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_worldmap();
  public:
  bool worldmap(int index) const;
  void set_worldmap(int index, bool value);
  void add_worldmap(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      worldmap() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_worldmap();

  // repeated bool flags = 2;
  int flags_size() const;
  private:
  int _internal_flags_size() const;
  public:
  void clear_flags();
  private:
  bool _internal_flags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_flags() const;
  void _internal_add_flags(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_flags();
  public:
  bool flags(int index) const;
  void set_flags(int index, bool value);
  void add_flags(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_flags();

  // repeated bool crewstats = 3;
  int crewstats_size() const;
  private:
  int _internal_crewstats_size() const;
  public:
  void clear_crewstats();
  private:
  bool _internal_crewstats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_crewstats() const;
  void _internal_add_crewstats(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_crewstats();
  public:
  bool crewstats(int index) const;
  void set_crewstats(int index, bool value);
  void add_crewstats(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      crewstats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_crewstats();

  // repeated bool collect = 4;
  int collect_size() const;
  private:
  int _internal_collect_size() const;
  public:
  void clear_collect();
  private:
  bool _internal_collect(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_collect() const;
  void _internal_add_collect(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_collect();
  public:
  bool collect(int index) const;
  void set_collect(int index, bool value);
  void add_collect(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      collect() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_collect();

  // string teleportscript = 15;
  void clear_teleportscript();
  const std::string& teleportscript() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_teleportscript(ArgT0&& arg0, ArgT... args);
  std::string* mutable_teleportscript();
  PROTOBUF_NODISCARD std::string* release_teleportscript();
  void set_allocated_teleportscript(std::string* teleportscript);
  private:
  const std::string& _internal_teleportscript() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_teleportscript(const std::string& value);
  std::string* _internal_mutable_teleportscript();
  public:

  // string hardestroom = 26;
  void clear_hardestroom();
  const std::string& hardestroom() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hardestroom(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hardestroom();
  PROTOBUF_NODISCARD std::string* release_hardestroom();
  void set_allocated_hardestroom(std::string* hardestroom);
  private:
  const std::string& _internal_hardestroom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hardestroom(const std::string& value);
  std::string* _internal_mutable_hardestroom();
  public:

  // string summary = 30;
  void clear_summary();
  const std::string& summary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_summary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_summary();
  PROTOBUF_NODISCARD std::string* release_summary();
  void set_allocated_summary(std::string* summary);
  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(const std::string& value);
  std::string* _internal_mutable_summary();
  public:

  // int32 savex = 5;
  void clear_savex();
  int32_t savex() const;
  void set_savex(int32_t value);
  private:
  int32_t _internal_savex() const;
  void _internal_set_savex(int32_t value);
  public:

  // int32 savey = 6;
  void clear_savey();
  int32_t savey() const;
  void set_savey(int32_t value);
  private:
  int32_t _internal_savey() const;
  void _internal_set_savey(int32_t value);
  public:

  // int32 saverx = 7;
  void clear_saverx();
  int32_t saverx() const;
  void set_saverx(int32_t value);
  private:
  int32_t _internal_saverx() const;
  void _internal_set_saverx(int32_t value);
  public:

  // int32 savery = 8;
  void clear_savery();
  int32_t savery() const;
  void set_savery(int32_t value);
  private:
  int32_t _internal_savery() const;
  void _internal_set_savery(int32_t value);
  public:

  // int32 savegc = 9;
  void clear_savegc();
  int32_t savegc() const;
  void set_savegc(int32_t value);
  private:
  int32_t _internal_savegc() const;
  void _internal_set_savegc(int32_t value);
  public:

  // int32 savedir = 10;
  void clear_savedir();
  int32_t savedir() const;
  void set_savedir(int32_t value);
  private:
  int32_t _internal_savedir() const;
  void _internal_set_savedir(int32_t value);
  public:

  // int32 savepoint = 11;
  void clear_savepoint();
  int32_t savepoint() const;
  void set_savepoint(int32_t value);
  private:
  int32_t _internal_savepoint() const;
  void _internal_set_savepoint(int32_t value);
  public:

  // int32 trinkets = 12;
  void clear_trinkets();
  int32_t trinkets() const;
  void set_trinkets(int32_t value);
  private:
  int32_t _internal_trinkets() const;
  void _internal_set_trinkets(int32_t value);
  public:

  // int32 currentsong = 13;
  void clear_currentsong();
  int32_t currentsong() const;
  void set_currentsong(int32_t value);
  private:
  int32_t _internal_currentsong() const;
  void _internal_set_currentsong(int32_t value);
  public:

  // int32 companion = 16;
  void clear_companion();
  int32_t companion() const;
  void set_companion(int32_t value);
  private:
  int32_t _internal_companion() const;
  void _internal_set_companion(int32_t value);
  public:

  // int32 lastsaved = 17;
  void clear_lastsaved();
  int32_t lastsaved() const;
  void set_lastsaved(int32_t value);
  private:
  int32_t _internal_lastsaved() const;
  void _internal_set_lastsaved(int32_t value);
  public:

  // int32 scmprogress = 19;
  void clear_scmprogress();
  int32_t scmprogress() const;
  void set_scmprogress(int32_t value);
  private:
  int32_t _internal_scmprogress() const;
  void _internal_set_scmprogress(int32_t value);
  public:

  // int32 frames = 20;
  void clear_frames();
  int32_t frames() const;
  void set_frames(int32_t value);
  private:
  int32_t _internal_frames() const;
  void _internal_set_frames(int32_t value);
  public:

  // int32 seconds = 21;
  void clear_seconds();
  int32_t seconds() const;
  void set_seconds(int32_t value);
  private:
  int32_t _internal_seconds() const;
  void _internal_set_seconds(int32_t value);
  public:

  // int32 minutes = 22;
  void clear_minutes();
  int32_t minutes() const;
  void set_minutes(int32_t value);
  private:
  int32_t _internal_minutes() const;
  void _internal_set_minutes(int32_t value);
  public:

  // bool showtargets = 14;
  void clear_showtargets();
  bool showtargets() const;
  void set_showtargets(bool value);
  private:
  bool _internal_showtargets() const;
  void _internal_set_showtargets(bool value);
  public:

  // bool supercrewmate = 18;
  void clear_supercrewmate();
  bool supercrewmate() const;
  void set_supercrewmate(bool value);
  private:
  bool _internal_supercrewmate() const;
  void _internal_set_supercrewmate(bool value);
  public:

  // bool finalmode = 28;
  void clear_finalmode();
  bool finalmode() const;
  void set_finalmode(bool value);
  private:
  bool _internal_finalmode() const;
  void _internal_set_finalmode(bool value);
  public:

  // bool finalstretch = 29;
  void clear_finalstretch();
  bool finalstretch() const;
  void set_finalstretch(bool value);
  private:
  bool _internal_finalstretch() const;
  void _internal_set_finalstretch(bool value);
  public:

  // int32 hours = 23;
  void clear_hours();
  int32_t hours() const;
  void set_hours(int32_t value);
  private:
  int32_t _internal_hours() const;
  void _internal_set_hours(int32_t value);
  public:

  // int32 deathcounts = 24;
  void clear_deathcounts();
  int32_t deathcounts() const;
  void set_deathcounts(int32_t value);
  private:
  int32_t _internal_deathcounts() const;
  void _internal_set_deathcounts(int32_t value);
  public:

  // int32 totalflips = 25;
  void clear_totalflips();
  int32_t totalflips() const;
  void set_totalflips(int32_t value);
  private:
  int32_t _internal_totalflips() const;
  void _internal_set_totalflips(int32_t value);
  public:

  // int32 hardestroomdeaths = 27;
  void clear_hardestroomdeaths();
  int32_t hardestroomdeaths() const;
  void set_hardestroomdeaths(int32_t value);
  private:
  int32_t _internal_hardestroomdeaths() const;
  void _internal_set_hardestroomdeaths(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > worldmap_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > flags_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > crewstats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > collect_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teleportscript_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hardestroom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
    int32_t savex_;
    int32_t savey_;
    int32_t saverx_;
    int32_t savery_;
    int32_t savegc_;
    int32_t savedir_;
    int32_t savepoint_;
    int32_t trinkets_;
    int32_t currentsong_;
    int32_t companion_;
    int32_t lastsaved_;
    int32_t scmprogress_;
    int32_t frames_;
    int32_t seconds_;
    int32_t minutes_;
    bool showtargets_;
    bool supercrewmate_;
    bool finalmode_;
    bool finalstretch_;
    int32_t hours_;
    int32_t deathcounts_;
    int32_t totalflips_;
    int32_t hardestroomdeaths_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mvvvvvvm_2eproto;
};
// -------------------------------------------------------------------

class PlayerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerStatus) */ {
 public:
  inline PlayerStatus() : PlayerStatus(nullptr) {}
  ~PlayerStatus() override;
  explicit PROTOBUF_CONSTEXPR PlayerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerStatus(const PlayerStatus& from);
  PlayerStatus(PlayerStatus&& from) noexcept
    : PlayerStatus() {
    *this = ::std::move(from);
  }

  inline PlayerStatus& operator=(const PlayerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerStatus& operator=(PlayerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerStatus* internal_default_instance() {
    return reinterpret_cast<const PlayerStatus*>(
               &_PlayerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerStatus& a, PlayerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerStatus& from) {
    PlayerStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerStatus";
  }
  protected:
  explicit PlayerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRxFieldNumber = 2,
    kRyFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kVxFieldNumber = 6,
    kVyFieldNumber = 7,
    kDirFieldNumber = 8,
    kTileFieldNumber = 9,
    kFlipFieldNumber = 10,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 rx = 2;
  void clear_rx();
  int32_t rx() const;
  void set_rx(int32_t value);
  private:
  int32_t _internal_rx() const;
  void _internal_set_rx(int32_t value);
  public:

  // int32 ry = 3;
  void clear_ry();
  int32_t ry() const;
  void set_ry(int32_t value);
  private:
  int32_t _internal_ry() const;
  void _internal_set_ry(int32_t value);
  public:

  // int32 x = 4;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 5;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // float vx = 6;
  void clear_vx();
  float vx() const;
  void set_vx(float value);
  private:
  float _internal_vx() const;
  void _internal_set_vx(float value);
  public:

  // float vy = 7;
  void clear_vy();
  float vy() const;
  void set_vy(float value);
  private:
  float _internal_vy() const;
  void _internal_set_vy(float value);
  public:

  // int32 dir = 8;
  void clear_dir();
  int32_t dir() const;
  void set_dir(int32_t value);
  private:
  int32_t _internal_dir() const;
  void _internal_set_dir(int32_t value);
  public:

  // int32 tile = 9;
  void clear_tile();
  int32_t tile() const;
  void set_tile(int32_t value);
  private:
  int32_t _internal_tile() const;
  void _internal_set_tile(int32_t value);
  public:

  // int32 flip = 10;
  void clear_flip();
  int32_t flip() const;
  void set_flip(int32_t value);
  private:
  int32_t _internal_flip() const;
  void _internal_set_flip(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t rx_;
    int32_t ry_;
    int32_t x_;
    int32_t y_;
    float vx_;
    float vy_;
    int32_t dir_;
    int32_t tile_;
    int32_t flip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mvvvvvvm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// World

// string name = 1;
inline void World::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& World::name() const {
  // @@protoc_insertion_point(field_get:World.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void World::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:World.name)
}
inline std::string* World::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:World.name)
  return _s;
}
inline const std::string& World::_internal_name() const {
  return _impl_.name_.Get();
}
inline void World::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* World::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* World::release_name() {
  // @@protoc_insertion_point(field_release:World.name)
  return _impl_.name_.Release();
}
inline void World::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:World.name)
}

// int32 playerCount = 2;
inline void World::clear_playercount() {
  _impl_.playercount_ = 0;
}
inline int32_t World::_internal_playercount() const {
  return _impl_.playercount_;
}
inline int32_t World::playercount() const {
  // @@protoc_insertion_point(field_get:World.playerCount)
  return _internal_playercount();
}
inline void World::_internal_set_playercount(int32_t value) {
  
  _impl_.playercount_ = value;
}
inline void World::set_playercount(int32_t value) {
  _internal_set_playercount(value);
  // @@protoc_insertion_point(field_set:World.playerCount)
}

// int32 maxPlayerCount = 3;
inline void World::clear_maxplayercount() {
  _impl_.maxplayercount_ = 0;
}
inline int32_t World::_internal_maxplayercount() const {
  return _impl_.maxplayercount_;
}
inline int32_t World::maxplayercount() const {
  // @@protoc_insertion_point(field_get:World.maxPlayerCount)
  return _internal_maxplayercount();
}
inline void World::_internal_set_maxplayercount(int32_t value) {
  
  _impl_.maxplayercount_ = value;
}
inline void World::set_maxplayercount(int32_t value) {
  _internal_set_maxplayercount(value);
  // @@protoc_insertion_point(field_set:World.maxPlayerCount)
}

// -------------------------------------------------------------------

// TSave

// repeated bool worldmap = 1;
inline int TSave::_internal_worldmap_size() const {
  return _impl_.worldmap_.size();
}
inline int TSave::worldmap_size() const {
  return _internal_worldmap_size();
}
inline void TSave::clear_worldmap() {
  _impl_.worldmap_.Clear();
}
inline bool TSave::_internal_worldmap(int index) const {
  return _impl_.worldmap_.Get(index);
}
inline bool TSave::worldmap(int index) const {
  // @@protoc_insertion_point(field_get:TSave.worldmap)
  return _internal_worldmap(index);
}
inline void TSave::set_worldmap(int index, bool value) {
  _impl_.worldmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSave.worldmap)
}
inline void TSave::_internal_add_worldmap(bool value) {
  _impl_.worldmap_.Add(value);
}
inline void TSave::add_worldmap(bool value) {
  _internal_add_worldmap(value);
  // @@protoc_insertion_point(field_add:TSave.worldmap)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TSave::_internal_worldmap() const {
  return _impl_.worldmap_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TSave::worldmap() const {
  // @@protoc_insertion_point(field_list:TSave.worldmap)
  return _internal_worldmap();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TSave::_internal_mutable_worldmap() {
  return &_impl_.worldmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TSave::mutable_worldmap() {
  // @@protoc_insertion_point(field_mutable_list:TSave.worldmap)
  return _internal_mutable_worldmap();
}

// repeated bool flags = 2;
inline int TSave::_internal_flags_size() const {
  return _impl_.flags_.size();
}
inline int TSave::flags_size() const {
  return _internal_flags_size();
}
inline void TSave::clear_flags() {
  _impl_.flags_.Clear();
}
inline bool TSave::_internal_flags(int index) const {
  return _impl_.flags_.Get(index);
}
inline bool TSave::flags(int index) const {
  // @@protoc_insertion_point(field_get:TSave.flags)
  return _internal_flags(index);
}
inline void TSave::set_flags(int index, bool value) {
  _impl_.flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSave.flags)
}
inline void TSave::_internal_add_flags(bool value) {
  _impl_.flags_.Add(value);
}
inline void TSave::add_flags(bool value) {
  _internal_add_flags(value);
  // @@protoc_insertion_point(field_add:TSave.flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TSave::_internal_flags() const {
  return _impl_.flags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TSave::flags() const {
  // @@protoc_insertion_point(field_list:TSave.flags)
  return _internal_flags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TSave::_internal_mutable_flags() {
  return &_impl_.flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TSave::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:TSave.flags)
  return _internal_mutable_flags();
}

// repeated bool crewstats = 3;
inline int TSave::_internal_crewstats_size() const {
  return _impl_.crewstats_.size();
}
inline int TSave::crewstats_size() const {
  return _internal_crewstats_size();
}
inline void TSave::clear_crewstats() {
  _impl_.crewstats_.Clear();
}
inline bool TSave::_internal_crewstats(int index) const {
  return _impl_.crewstats_.Get(index);
}
inline bool TSave::crewstats(int index) const {
  // @@protoc_insertion_point(field_get:TSave.crewstats)
  return _internal_crewstats(index);
}
inline void TSave::set_crewstats(int index, bool value) {
  _impl_.crewstats_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSave.crewstats)
}
inline void TSave::_internal_add_crewstats(bool value) {
  _impl_.crewstats_.Add(value);
}
inline void TSave::add_crewstats(bool value) {
  _internal_add_crewstats(value);
  // @@protoc_insertion_point(field_add:TSave.crewstats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TSave::_internal_crewstats() const {
  return _impl_.crewstats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TSave::crewstats() const {
  // @@protoc_insertion_point(field_list:TSave.crewstats)
  return _internal_crewstats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TSave::_internal_mutable_crewstats() {
  return &_impl_.crewstats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TSave::mutable_crewstats() {
  // @@protoc_insertion_point(field_mutable_list:TSave.crewstats)
  return _internal_mutable_crewstats();
}

// repeated bool collect = 4;
inline int TSave::_internal_collect_size() const {
  return _impl_.collect_.size();
}
inline int TSave::collect_size() const {
  return _internal_collect_size();
}
inline void TSave::clear_collect() {
  _impl_.collect_.Clear();
}
inline bool TSave::_internal_collect(int index) const {
  return _impl_.collect_.Get(index);
}
inline bool TSave::collect(int index) const {
  // @@protoc_insertion_point(field_get:TSave.collect)
  return _internal_collect(index);
}
inline void TSave::set_collect(int index, bool value) {
  _impl_.collect_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSave.collect)
}
inline void TSave::_internal_add_collect(bool value) {
  _impl_.collect_.Add(value);
}
inline void TSave::add_collect(bool value) {
  _internal_add_collect(value);
  // @@protoc_insertion_point(field_add:TSave.collect)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TSave::_internal_collect() const {
  return _impl_.collect_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TSave::collect() const {
  // @@protoc_insertion_point(field_list:TSave.collect)
  return _internal_collect();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TSave::_internal_mutable_collect() {
  return &_impl_.collect_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TSave::mutable_collect() {
  // @@protoc_insertion_point(field_mutable_list:TSave.collect)
  return _internal_mutable_collect();
}

// int32 savex = 5;
inline void TSave::clear_savex() {
  _impl_.savex_ = 0;
}
inline int32_t TSave::_internal_savex() const {
  return _impl_.savex_;
}
inline int32_t TSave::savex() const {
  // @@protoc_insertion_point(field_get:TSave.savex)
  return _internal_savex();
}
inline void TSave::_internal_set_savex(int32_t value) {
  
  _impl_.savex_ = value;
}
inline void TSave::set_savex(int32_t value) {
  _internal_set_savex(value);
  // @@protoc_insertion_point(field_set:TSave.savex)
}

// int32 savey = 6;
inline void TSave::clear_savey() {
  _impl_.savey_ = 0;
}
inline int32_t TSave::_internal_savey() const {
  return _impl_.savey_;
}
inline int32_t TSave::savey() const {
  // @@protoc_insertion_point(field_get:TSave.savey)
  return _internal_savey();
}
inline void TSave::_internal_set_savey(int32_t value) {
  
  _impl_.savey_ = value;
}
inline void TSave::set_savey(int32_t value) {
  _internal_set_savey(value);
  // @@protoc_insertion_point(field_set:TSave.savey)
}

// int32 saverx = 7;
inline void TSave::clear_saverx() {
  _impl_.saverx_ = 0;
}
inline int32_t TSave::_internal_saverx() const {
  return _impl_.saverx_;
}
inline int32_t TSave::saverx() const {
  // @@protoc_insertion_point(field_get:TSave.saverx)
  return _internal_saverx();
}
inline void TSave::_internal_set_saverx(int32_t value) {
  
  _impl_.saverx_ = value;
}
inline void TSave::set_saverx(int32_t value) {
  _internal_set_saverx(value);
  // @@protoc_insertion_point(field_set:TSave.saverx)
}

// int32 savery = 8;
inline void TSave::clear_savery() {
  _impl_.savery_ = 0;
}
inline int32_t TSave::_internal_savery() const {
  return _impl_.savery_;
}
inline int32_t TSave::savery() const {
  // @@protoc_insertion_point(field_get:TSave.savery)
  return _internal_savery();
}
inline void TSave::_internal_set_savery(int32_t value) {
  
  _impl_.savery_ = value;
}
inline void TSave::set_savery(int32_t value) {
  _internal_set_savery(value);
  // @@protoc_insertion_point(field_set:TSave.savery)
}

// int32 savegc = 9;
inline void TSave::clear_savegc() {
  _impl_.savegc_ = 0;
}
inline int32_t TSave::_internal_savegc() const {
  return _impl_.savegc_;
}
inline int32_t TSave::savegc() const {
  // @@protoc_insertion_point(field_get:TSave.savegc)
  return _internal_savegc();
}
inline void TSave::_internal_set_savegc(int32_t value) {
  
  _impl_.savegc_ = value;
}
inline void TSave::set_savegc(int32_t value) {
  _internal_set_savegc(value);
  // @@protoc_insertion_point(field_set:TSave.savegc)
}

// int32 savedir = 10;
inline void TSave::clear_savedir() {
  _impl_.savedir_ = 0;
}
inline int32_t TSave::_internal_savedir() const {
  return _impl_.savedir_;
}
inline int32_t TSave::savedir() const {
  // @@protoc_insertion_point(field_get:TSave.savedir)
  return _internal_savedir();
}
inline void TSave::_internal_set_savedir(int32_t value) {
  
  _impl_.savedir_ = value;
}
inline void TSave::set_savedir(int32_t value) {
  _internal_set_savedir(value);
  // @@protoc_insertion_point(field_set:TSave.savedir)
}

// int32 savepoint = 11;
inline void TSave::clear_savepoint() {
  _impl_.savepoint_ = 0;
}
inline int32_t TSave::_internal_savepoint() const {
  return _impl_.savepoint_;
}
inline int32_t TSave::savepoint() const {
  // @@protoc_insertion_point(field_get:TSave.savepoint)
  return _internal_savepoint();
}
inline void TSave::_internal_set_savepoint(int32_t value) {
  
  _impl_.savepoint_ = value;
}
inline void TSave::set_savepoint(int32_t value) {
  _internal_set_savepoint(value);
  // @@protoc_insertion_point(field_set:TSave.savepoint)
}

// int32 trinkets = 12;
inline void TSave::clear_trinkets() {
  _impl_.trinkets_ = 0;
}
inline int32_t TSave::_internal_trinkets() const {
  return _impl_.trinkets_;
}
inline int32_t TSave::trinkets() const {
  // @@protoc_insertion_point(field_get:TSave.trinkets)
  return _internal_trinkets();
}
inline void TSave::_internal_set_trinkets(int32_t value) {
  
  _impl_.trinkets_ = value;
}
inline void TSave::set_trinkets(int32_t value) {
  _internal_set_trinkets(value);
  // @@protoc_insertion_point(field_set:TSave.trinkets)
}

// int32 currentsong = 13;
inline void TSave::clear_currentsong() {
  _impl_.currentsong_ = 0;
}
inline int32_t TSave::_internal_currentsong() const {
  return _impl_.currentsong_;
}
inline int32_t TSave::currentsong() const {
  // @@protoc_insertion_point(field_get:TSave.currentsong)
  return _internal_currentsong();
}
inline void TSave::_internal_set_currentsong(int32_t value) {
  
  _impl_.currentsong_ = value;
}
inline void TSave::set_currentsong(int32_t value) {
  _internal_set_currentsong(value);
  // @@protoc_insertion_point(field_set:TSave.currentsong)
}

// bool showtargets = 14;
inline void TSave::clear_showtargets() {
  _impl_.showtargets_ = false;
}
inline bool TSave::_internal_showtargets() const {
  return _impl_.showtargets_;
}
inline bool TSave::showtargets() const {
  // @@protoc_insertion_point(field_get:TSave.showtargets)
  return _internal_showtargets();
}
inline void TSave::_internal_set_showtargets(bool value) {
  
  _impl_.showtargets_ = value;
}
inline void TSave::set_showtargets(bool value) {
  _internal_set_showtargets(value);
  // @@protoc_insertion_point(field_set:TSave.showtargets)
}

// string teleportscript = 15;
inline void TSave::clear_teleportscript() {
  _impl_.teleportscript_.ClearToEmpty();
}
inline const std::string& TSave::teleportscript() const {
  // @@protoc_insertion_point(field_get:TSave.teleportscript)
  return _internal_teleportscript();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSave::set_teleportscript(ArgT0&& arg0, ArgT... args) {
 
 _impl_.teleportscript_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSave.teleportscript)
}
inline std::string* TSave::mutable_teleportscript() {
  std::string* _s = _internal_mutable_teleportscript();
  // @@protoc_insertion_point(field_mutable:TSave.teleportscript)
  return _s;
}
inline const std::string& TSave::_internal_teleportscript() const {
  return _impl_.teleportscript_.Get();
}
inline void TSave::_internal_set_teleportscript(const std::string& value) {
  
  _impl_.teleportscript_.Set(value, GetArenaForAllocation());
}
inline std::string* TSave::_internal_mutable_teleportscript() {
  
  return _impl_.teleportscript_.Mutable(GetArenaForAllocation());
}
inline std::string* TSave::release_teleportscript() {
  // @@protoc_insertion_point(field_release:TSave.teleportscript)
  return _impl_.teleportscript_.Release();
}
inline void TSave::set_allocated_teleportscript(std::string* teleportscript) {
  if (teleportscript != nullptr) {
    
  } else {
    
  }
  _impl_.teleportscript_.SetAllocated(teleportscript, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.teleportscript_.IsDefault()) {
    _impl_.teleportscript_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSave.teleportscript)
}

// int32 companion = 16;
inline void TSave::clear_companion() {
  _impl_.companion_ = 0;
}
inline int32_t TSave::_internal_companion() const {
  return _impl_.companion_;
}
inline int32_t TSave::companion() const {
  // @@protoc_insertion_point(field_get:TSave.companion)
  return _internal_companion();
}
inline void TSave::_internal_set_companion(int32_t value) {
  
  _impl_.companion_ = value;
}
inline void TSave::set_companion(int32_t value) {
  _internal_set_companion(value);
  // @@protoc_insertion_point(field_set:TSave.companion)
}

// int32 lastsaved = 17;
inline void TSave::clear_lastsaved() {
  _impl_.lastsaved_ = 0;
}
inline int32_t TSave::_internal_lastsaved() const {
  return _impl_.lastsaved_;
}
inline int32_t TSave::lastsaved() const {
  // @@protoc_insertion_point(field_get:TSave.lastsaved)
  return _internal_lastsaved();
}
inline void TSave::_internal_set_lastsaved(int32_t value) {
  
  _impl_.lastsaved_ = value;
}
inline void TSave::set_lastsaved(int32_t value) {
  _internal_set_lastsaved(value);
  // @@protoc_insertion_point(field_set:TSave.lastsaved)
}

// bool supercrewmate = 18;
inline void TSave::clear_supercrewmate() {
  _impl_.supercrewmate_ = false;
}
inline bool TSave::_internal_supercrewmate() const {
  return _impl_.supercrewmate_;
}
inline bool TSave::supercrewmate() const {
  // @@protoc_insertion_point(field_get:TSave.supercrewmate)
  return _internal_supercrewmate();
}
inline void TSave::_internal_set_supercrewmate(bool value) {
  
  _impl_.supercrewmate_ = value;
}
inline void TSave::set_supercrewmate(bool value) {
  _internal_set_supercrewmate(value);
  // @@protoc_insertion_point(field_set:TSave.supercrewmate)
}

// int32 scmprogress = 19;
inline void TSave::clear_scmprogress() {
  _impl_.scmprogress_ = 0;
}
inline int32_t TSave::_internal_scmprogress() const {
  return _impl_.scmprogress_;
}
inline int32_t TSave::scmprogress() const {
  // @@protoc_insertion_point(field_get:TSave.scmprogress)
  return _internal_scmprogress();
}
inline void TSave::_internal_set_scmprogress(int32_t value) {
  
  _impl_.scmprogress_ = value;
}
inline void TSave::set_scmprogress(int32_t value) {
  _internal_set_scmprogress(value);
  // @@protoc_insertion_point(field_set:TSave.scmprogress)
}

// int32 frames = 20;
inline void TSave::clear_frames() {
  _impl_.frames_ = 0;
}
inline int32_t TSave::_internal_frames() const {
  return _impl_.frames_;
}
inline int32_t TSave::frames() const {
  // @@protoc_insertion_point(field_get:TSave.frames)
  return _internal_frames();
}
inline void TSave::_internal_set_frames(int32_t value) {
  
  _impl_.frames_ = value;
}
inline void TSave::set_frames(int32_t value) {
  _internal_set_frames(value);
  // @@protoc_insertion_point(field_set:TSave.frames)
}

// int32 seconds = 21;
inline void TSave::clear_seconds() {
  _impl_.seconds_ = 0;
}
inline int32_t TSave::_internal_seconds() const {
  return _impl_.seconds_;
}
inline int32_t TSave::seconds() const {
  // @@protoc_insertion_point(field_get:TSave.seconds)
  return _internal_seconds();
}
inline void TSave::_internal_set_seconds(int32_t value) {
  
  _impl_.seconds_ = value;
}
inline void TSave::set_seconds(int32_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:TSave.seconds)
}

// int32 minutes = 22;
inline void TSave::clear_minutes() {
  _impl_.minutes_ = 0;
}
inline int32_t TSave::_internal_minutes() const {
  return _impl_.minutes_;
}
inline int32_t TSave::minutes() const {
  // @@protoc_insertion_point(field_get:TSave.minutes)
  return _internal_minutes();
}
inline void TSave::_internal_set_minutes(int32_t value) {
  
  _impl_.minutes_ = value;
}
inline void TSave::set_minutes(int32_t value) {
  _internal_set_minutes(value);
  // @@protoc_insertion_point(field_set:TSave.minutes)
}

// int32 hours = 23;
inline void TSave::clear_hours() {
  _impl_.hours_ = 0;
}
inline int32_t TSave::_internal_hours() const {
  return _impl_.hours_;
}
inline int32_t TSave::hours() const {
  // @@protoc_insertion_point(field_get:TSave.hours)
  return _internal_hours();
}
inline void TSave::_internal_set_hours(int32_t value) {
  
  _impl_.hours_ = value;
}
inline void TSave::set_hours(int32_t value) {
  _internal_set_hours(value);
  // @@protoc_insertion_point(field_set:TSave.hours)
}

// int32 deathcounts = 24;
inline void TSave::clear_deathcounts() {
  _impl_.deathcounts_ = 0;
}
inline int32_t TSave::_internal_deathcounts() const {
  return _impl_.deathcounts_;
}
inline int32_t TSave::deathcounts() const {
  // @@protoc_insertion_point(field_get:TSave.deathcounts)
  return _internal_deathcounts();
}
inline void TSave::_internal_set_deathcounts(int32_t value) {
  
  _impl_.deathcounts_ = value;
}
inline void TSave::set_deathcounts(int32_t value) {
  _internal_set_deathcounts(value);
  // @@protoc_insertion_point(field_set:TSave.deathcounts)
}

// int32 totalflips = 25;
inline void TSave::clear_totalflips() {
  _impl_.totalflips_ = 0;
}
inline int32_t TSave::_internal_totalflips() const {
  return _impl_.totalflips_;
}
inline int32_t TSave::totalflips() const {
  // @@protoc_insertion_point(field_get:TSave.totalflips)
  return _internal_totalflips();
}
inline void TSave::_internal_set_totalflips(int32_t value) {
  
  _impl_.totalflips_ = value;
}
inline void TSave::set_totalflips(int32_t value) {
  _internal_set_totalflips(value);
  // @@protoc_insertion_point(field_set:TSave.totalflips)
}

// string hardestroom = 26;
inline void TSave::clear_hardestroom() {
  _impl_.hardestroom_.ClearToEmpty();
}
inline const std::string& TSave::hardestroom() const {
  // @@protoc_insertion_point(field_get:TSave.hardestroom)
  return _internal_hardestroom();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSave::set_hardestroom(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hardestroom_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSave.hardestroom)
}
inline std::string* TSave::mutable_hardestroom() {
  std::string* _s = _internal_mutable_hardestroom();
  // @@protoc_insertion_point(field_mutable:TSave.hardestroom)
  return _s;
}
inline const std::string& TSave::_internal_hardestroom() const {
  return _impl_.hardestroom_.Get();
}
inline void TSave::_internal_set_hardestroom(const std::string& value) {
  
  _impl_.hardestroom_.Set(value, GetArenaForAllocation());
}
inline std::string* TSave::_internal_mutable_hardestroom() {
  
  return _impl_.hardestroom_.Mutable(GetArenaForAllocation());
}
inline std::string* TSave::release_hardestroom() {
  // @@protoc_insertion_point(field_release:TSave.hardestroom)
  return _impl_.hardestroom_.Release();
}
inline void TSave::set_allocated_hardestroom(std::string* hardestroom) {
  if (hardestroom != nullptr) {
    
  } else {
    
  }
  _impl_.hardestroom_.SetAllocated(hardestroom, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hardestroom_.IsDefault()) {
    _impl_.hardestroom_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSave.hardestroom)
}

// int32 hardestroomdeaths = 27;
inline void TSave::clear_hardestroomdeaths() {
  _impl_.hardestroomdeaths_ = 0;
}
inline int32_t TSave::_internal_hardestroomdeaths() const {
  return _impl_.hardestroomdeaths_;
}
inline int32_t TSave::hardestroomdeaths() const {
  // @@protoc_insertion_point(field_get:TSave.hardestroomdeaths)
  return _internal_hardestroomdeaths();
}
inline void TSave::_internal_set_hardestroomdeaths(int32_t value) {
  
  _impl_.hardestroomdeaths_ = value;
}
inline void TSave::set_hardestroomdeaths(int32_t value) {
  _internal_set_hardestroomdeaths(value);
  // @@protoc_insertion_point(field_set:TSave.hardestroomdeaths)
}

// bool finalmode = 28;
inline void TSave::clear_finalmode() {
  _impl_.finalmode_ = false;
}
inline bool TSave::_internal_finalmode() const {
  return _impl_.finalmode_;
}
inline bool TSave::finalmode() const {
  // @@protoc_insertion_point(field_get:TSave.finalmode)
  return _internal_finalmode();
}
inline void TSave::_internal_set_finalmode(bool value) {
  
  _impl_.finalmode_ = value;
}
inline void TSave::set_finalmode(bool value) {
  _internal_set_finalmode(value);
  // @@protoc_insertion_point(field_set:TSave.finalmode)
}

// bool finalstretch = 29;
inline void TSave::clear_finalstretch() {
  _impl_.finalstretch_ = false;
}
inline bool TSave::_internal_finalstretch() const {
  return _impl_.finalstretch_;
}
inline bool TSave::finalstretch() const {
  // @@protoc_insertion_point(field_get:TSave.finalstretch)
  return _internal_finalstretch();
}
inline void TSave::_internal_set_finalstretch(bool value) {
  
  _impl_.finalstretch_ = value;
}
inline void TSave::set_finalstretch(bool value) {
  _internal_set_finalstretch(value);
  // @@protoc_insertion_point(field_set:TSave.finalstretch)
}

// string summary = 30;
inline void TSave::clear_summary() {
  _impl_.summary_.ClearToEmpty();
}
inline const std::string& TSave::summary() const {
  // @@protoc_insertion_point(field_get:TSave.summary)
  return _internal_summary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TSave::set_summary(ArgT0&& arg0, ArgT... args) {
 
 _impl_.summary_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSave.summary)
}
inline std::string* TSave::mutable_summary() {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:TSave.summary)
  return _s;
}
inline const std::string& TSave::_internal_summary() const {
  return _impl_.summary_.Get();
}
inline void TSave::_internal_set_summary(const std::string& value) {
  
  _impl_.summary_.Set(value, GetArenaForAllocation());
}
inline std::string* TSave::_internal_mutable_summary() {
  
  return _impl_.summary_.Mutable(GetArenaForAllocation());
}
inline std::string* TSave::release_summary() {
  // @@protoc_insertion_point(field_release:TSave.summary)
  return _impl_.summary_.Release();
}
inline void TSave::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    
  } else {
    
  }
  _impl_.summary_.SetAllocated(summary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.summary_.IsDefault()) {
    _impl_.summary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSave.summary)
}

// -------------------------------------------------------------------

// PlayerStatus

// int32 id = 1;
inline void PlayerStatus::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t PlayerStatus::_internal_id() const {
  return _impl_.id_;
}
inline int32_t PlayerStatus::id() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.id)
  return _internal_id();
}
inline void PlayerStatus::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void PlayerStatus::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlayerStatus.id)
}

// int32 rx = 2;
inline void PlayerStatus::clear_rx() {
  _impl_.rx_ = 0;
}
inline int32_t PlayerStatus::_internal_rx() const {
  return _impl_.rx_;
}
inline int32_t PlayerStatus::rx() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.rx)
  return _internal_rx();
}
inline void PlayerStatus::_internal_set_rx(int32_t value) {
  
  _impl_.rx_ = value;
}
inline void PlayerStatus::set_rx(int32_t value) {
  _internal_set_rx(value);
  // @@protoc_insertion_point(field_set:PlayerStatus.rx)
}

// int32 ry = 3;
inline void PlayerStatus::clear_ry() {
  _impl_.ry_ = 0;
}
inline int32_t PlayerStatus::_internal_ry() const {
  return _impl_.ry_;
}
inline int32_t PlayerStatus::ry() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.ry)
  return _internal_ry();
}
inline void PlayerStatus::_internal_set_ry(int32_t value) {
  
  _impl_.ry_ = value;
}
inline void PlayerStatus::set_ry(int32_t value) {
  _internal_set_ry(value);
  // @@protoc_insertion_point(field_set:PlayerStatus.ry)
}

// int32 x = 4;
inline void PlayerStatus::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t PlayerStatus::_internal_x() const {
  return _impl_.x_;
}
inline int32_t PlayerStatus::x() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.x)
  return _internal_x();
}
inline void PlayerStatus::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void PlayerStatus::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PlayerStatus.x)
}

// int32 y = 5;
inline void PlayerStatus::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t PlayerStatus::_internal_y() const {
  return _impl_.y_;
}
inline int32_t PlayerStatus::y() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.y)
  return _internal_y();
}
inline void PlayerStatus::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void PlayerStatus::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PlayerStatus.y)
}

// float vx = 6;
inline void PlayerStatus::clear_vx() {
  _impl_.vx_ = 0;
}
inline float PlayerStatus::_internal_vx() const {
  return _impl_.vx_;
}
inline float PlayerStatus::vx() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.vx)
  return _internal_vx();
}
inline void PlayerStatus::_internal_set_vx(float value) {
  
  _impl_.vx_ = value;
}
inline void PlayerStatus::set_vx(float value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:PlayerStatus.vx)
}

// float vy = 7;
inline void PlayerStatus::clear_vy() {
  _impl_.vy_ = 0;
}
inline float PlayerStatus::_internal_vy() const {
  return _impl_.vy_;
}
inline float PlayerStatus::vy() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.vy)
  return _internal_vy();
}
inline void PlayerStatus::_internal_set_vy(float value) {
  
  _impl_.vy_ = value;
}
inline void PlayerStatus::set_vy(float value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:PlayerStatus.vy)
}

// int32 dir = 8;
inline void PlayerStatus::clear_dir() {
  _impl_.dir_ = 0;
}
inline int32_t PlayerStatus::_internal_dir() const {
  return _impl_.dir_;
}
inline int32_t PlayerStatus::dir() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.dir)
  return _internal_dir();
}
inline void PlayerStatus::_internal_set_dir(int32_t value) {
  
  _impl_.dir_ = value;
}
inline void PlayerStatus::set_dir(int32_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:PlayerStatus.dir)
}

// int32 tile = 9;
inline void PlayerStatus::clear_tile() {
  _impl_.tile_ = 0;
}
inline int32_t PlayerStatus::_internal_tile() const {
  return _impl_.tile_;
}
inline int32_t PlayerStatus::tile() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.tile)
  return _internal_tile();
}
inline void PlayerStatus::_internal_set_tile(int32_t value) {
  
  _impl_.tile_ = value;
}
inline void PlayerStatus::set_tile(int32_t value) {
  _internal_set_tile(value);
  // @@protoc_insertion_point(field_set:PlayerStatus.tile)
}

// int32 flip = 10;
inline void PlayerStatus::clear_flip() {
  _impl_.flip_ = 0;
}
inline int32_t PlayerStatus::_internal_flip() const {
  return _impl_.flip_;
}
inline int32_t PlayerStatus::flip() const {
  // @@protoc_insertion_point(field_get:PlayerStatus.flip)
  return _internal_flip();
}
inline void PlayerStatus::_internal_set_flip(int32_t value) {
  
  _impl_.flip_ = value;
}
inline void PlayerStatus::set_flip(int32_t value) {
  _internal_set_flip(value);
  // @@protoc_insertion_point(field_set:PlayerStatus.flip)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mvvvvvvm_2eproto
