// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mvvvvvvm.proto

#include "mvvvvvvm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TSave::TSave(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.worldmap_)*/{}
  , /*decltype(_impl_.flags_)*/{}
  , /*decltype(_impl_.crewstats_)*/{}
  , /*decltype(_impl_.collect_)*/{}
  , /*decltype(_impl_.teleportscript_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hardestroom_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.summary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.savex_)*/0
  , /*decltype(_impl_.savey_)*/0
  , /*decltype(_impl_.saverx_)*/0
  , /*decltype(_impl_.savery_)*/0
  , /*decltype(_impl_.savegc_)*/0
  , /*decltype(_impl_.savedir_)*/0
  , /*decltype(_impl_.savepoint_)*/0
  , /*decltype(_impl_.trinkets_)*/0
  , /*decltype(_impl_.currentsong_)*/0
  , /*decltype(_impl_.companion_)*/0
  , /*decltype(_impl_.lastsaved_)*/0
  , /*decltype(_impl_.scmprogress_)*/0
  , /*decltype(_impl_.frames_)*/0
  , /*decltype(_impl_.seconds_)*/0
  , /*decltype(_impl_.minutes_)*/0
  , /*decltype(_impl_.showtargets_)*/false
  , /*decltype(_impl_.supercrewmate_)*/false
  , /*decltype(_impl_.finalmode_)*/false
  , /*decltype(_impl_.finalstretch_)*/false
  , /*decltype(_impl_.hours_)*/0
  , /*decltype(_impl_.deathcounts_)*/0
  , /*decltype(_impl_.totalflips_)*/0
  , /*decltype(_impl_.hardestroomdeaths_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TSaveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TSaveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TSaveDefaultTypeInternal() {}
  union {
    TSave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TSaveDefaultTypeInternal _TSave_default_instance_;
PROTOBUF_CONSTEXPR PlayerStatus::PlayerStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.rx_)*/0
  , /*decltype(_impl_.ry_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.vx_)*/0
  , /*decltype(_impl_.vy_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.tile_)*/0
  , /*decltype(_impl_.flip_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerStatusDefaultTypeInternal() {}
  union {
    PlayerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerStatusDefaultTypeInternal _PlayerStatus_default_instance_;
PROTOBUF_CONSTEXPR MessageEntity::MessageEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tsave_)*/nullptr
  , /*decltype(_impl_.ps_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0} {}
struct MessageEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageEntityDefaultTypeInternal() {}
  union {
    MessageEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageEntityDefaultTypeInternal _MessageEntity_default_instance_;
static ::_pb::Metadata file_level_metadata_mvvvvvvm_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_mvvvvvvm_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mvvvvvvm_2eproto = nullptr;

const uint32_t TableStruct_mvvvvvvm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.worldmap_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.crewstats_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.collect_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.savex_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.savey_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.saverx_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.savery_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.savegc_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.savedir_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.savepoint_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.trinkets_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.currentsong_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.showtargets_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.teleportscript_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.companion_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.lastsaved_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.supercrewmate_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.scmprogress_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.frames_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.minutes_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.hours_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.deathcounts_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.totalflips_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.hardestroom_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.hardestroomdeaths_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.finalmode_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.finalstretch_),
  PROTOBUF_FIELD_OFFSET(::TSave, _impl_.summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerStatus, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::PlayerStatus, _impl_.rx_),
  PROTOBUF_FIELD_OFFSET(::PlayerStatus, _impl_.ry_),
  PROTOBUF_FIELD_OFFSET(::PlayerStatus, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::PlayerStatus, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::PlayerStatus, _impl_.vx_),
  PROTOBUF_FIELD_OFFSET(::PlayerStatus, _impl_.vy_),
  PROTOBUF_FIELD_OFFSET(::PlayerStatus, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::PlayerStatus, _impl_.tile_),
  PROTOBUF_FIELD_OFFSET(::PlayerStatus, _impl_.flip_),
  PROTOBUF_FIELD_OFFSET(::MessageEntity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::MessageEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MessageEntity, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::MessageEntity, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::MessageEntity, _impl_.tsave_),
  PROTOBUF_FIELD_OFFSET(::MessageEntity, _impl_.ps_),
  ~0u,
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TSave)},
  { 36, -1, -1, sizeof(::PlayerStatus)},
  { 52, 62, -1, sizeof(::MessageEntity)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TSave_default_instance_._instance,
  &::_PlayerStatus_default_instance_._instance,
  &::_MessageEntity_default_instance_._instance,
};

const char descriptor_table_protodef_mvvvvvvm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016mvvvvvvm.proto\"\270\004\n\005TSave\022\020\n\010worldmap\030\001"
  " \003(\010\022\r\n\005flags\030\002 \003(\010\022\021\n\tcrewstats\030\003 \003(\010\022\017"
  "\n\007collect\030\004 \003(\010\022\r\n\005savex\030\005 \001(\005\022\r\n\005savey\030"
  "\006 \001(\005\022\016\n\006saverx\030\007 \001(\005\022\016\n\006savery\030\010 \001(\005\022\016\n"
  "\006savegc\030\t \001(\005\022\017\n\007savedir\030\n \001(\005\022\021\n\tsavepo"
  "int\030\013 \001(\005\022\020\n\010trinkets\030\014 \001(\005\022\023\n\013currentso"
  "ng\030\r \001(\005\022\023\n\013showtargets\030\016 \001(\010\022\026\n\016telepor"
  "tscript\030\017 \001(\t\022\021\n\tcompanion\030\020 \001(\005\022\021\n\tlast"
  "saved\030\021 \001(\005\022\025\n\rsupercrewmate\030\022 \001(\010\022\023\n\013sc"
  "mprogress\030\023 \001(\005\022\016\n\006frames\030\024 \001(\005\022\017\n\007secon"
  "ds\030\025 \001(\005\022\017\n\007minutes\030\026 \001(\005\022\r\n\005hours\030\027 \001(\005"
  "\022\023\n\013deathcounts\030\030 \001(\005\022\022\n\ntotalflips\030\031 \001("
  "\005\022\023\n\013hardestroom\030\032 \001(\t\022\031\n\021hardestroomdea"
  "ths\030\033 \001(\005\022\021\n\tfinalmode\030\034 \001(\010\022\024\n\014finalstr"
  "etch\030\035 \001(\010\022\017\n\007summary\030\036 \001(\t\"\211\001\n\014PlayerSt"
  "atus\022\n\n\002id\030\001 \001(\005\022\n\n\002rx\030\002 \001(\005\022\n\n\002ry\030\003 \001(\005"
  "\022\t\n\001x\030\004 \001(\005\022\t\n\001y\030\005 \001(\005\022\n\n\002vx\030\006 \001(\002\022\n\n\002vy"
  "\030\007 \001(\002\022\013\n\003dir\030\010 \001(\005\022\014\n\004tile\030\t \001(\005\022\014\n\004fli"
  "p\030\n \001(\005\"\204\001\n\rMessageEntity\022\n\n\002id\030\001 \001(\003\022\032\n"
  "\004type\030\002 \001(\0162\014.MessageType\022\032\n\005tsave\030\003 \001(\013"
  "2\006.TSaveH\000\210\001\001\022\036\n\002ps\030\004 \001(\0132\r.PlayerStatus"
  "H\001\210\001\001B\010\n\006_tsaveB\005\n\003_ps*8\n\013MessageType\022\013\n"
  "\007UNKNOWN\020\000\022\t\n\005TSAVE\020\001\022\021\n\rPLAYER_STATUS\020\002"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_mvvvvvvm_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mvvvvvvm_2eproto = {
    false, false, 928, descriptor_table_protodef_mvvvvvvm_2eproto,
    "mvvvvvvm.proto",
    &descriptor_table_mvvvvvvm_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_mvvvvvvm_2eproto::offsets,
    file_level_metadata_mvvvvvvm_2eproto, file_level_enum_descriptors_mvvvvvvm_2eproto,
    file_level_service_descriptors_mvvvvvvm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mvvvvvvm_2eproto_getter() {
  return &descriptor_table_mvvvvvvm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mvvvvvvm_2eproto(&descriptor_table_mvvvvvvm_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mvvvvvvm_2eproto);
  return file_level_enum_descriptors_mvvvvvvm_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TSave::_Internal {
 public:
};

TSave::TSave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSave)
}
TSave::TSave(const TSave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TSave* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.worldmap_){from._impl_.worldmap_}
    , decltype(_impl_.flags_){from._impl_.flags_}
    , decltype(_impl_.crewstats_){from._impl_.crewstats_}
    , decltype(_impl_.collect_){from._impl_.collect_}
    , decltype(_impl_.teleportscript_){}
    , decltype(_impl_.hardestroom_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.savex_){}
    , decltype(_impl_.savey_){}
    , decltype(_impl_.saverx_){}
    , decltype(_impl_.savery_){}
    , decltype(_impl_.savegc_){}
    , decltype(_impl_.savedir_){}
    , decltype(_impl_.savepoint_){}
    , decltype(_impl_.trinkets_){}
    , decltype(_impl_.currentsong_){}
    , decltype(_impl_.companion_){}
    , decltype(_impl_.lastsaved_){}
    , decltype(_impl_.scmprogress_){}
    , decltype(_impl_.frames_){}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.minutes_){}
    , decltype(_impl_.showtargets_){}
    , decltype(_impl_.supercrewmate_){}
    , decltype(_impl_.finalmode_){}
    , decltype(_impl_.finalstretch_){}
    , decltype(_impl_.hours_){}
    , decltype(_impl_.deathcounts_){}
    , decltype(_impl_.totalflips_){}
    , decltype(_impl_.hardestroomdeaths_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.teleportscript_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teleportscript_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_teleportscript().empty()) {
    _this->_impl_.teleportscript_.Set(from._internal_teleportscript(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hardestroom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hardestroom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hardestroom().empty()) {
    _this->_impl_.hardestroom_.Set(from._internal_hardestroom(), 
      _this->GetArenaForAllocation());
  }
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_summary().empty()) {
    _this->_impl_.summary_.Set(from._internal_summary(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.savex_, &from._impl_.savex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hardestroomdeaths_) -
    reinterpret_cast<char*>(&_impl_.savex_)) + sizeof(_impl_.hardestroomdeaths_));
  // @@protoc_insertion_point(copy_constructor:TSave)
}

inline void TSave::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.worldmap_){arena}
    , decltype(_impl_.flags_){arena}
    , decltype(_impl_.crewstats_){arena}
    , decltype(_impl_.collect_){arena}
    , decltype(_impl_.teleportscript_){}
    , decltype(_impl_.hardestroom_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.savex_){0}
    , decltype(_impl_.savey_){0}
    , decltype(_impl_.saverx_){0}
    , decltype(_impl_.savery_){0}
    , decltype(_impl_.savegc_){0}
    , decltype(_impl_.savedir_){0}
    , decltype(_impl_.savepoint_){0}
    , decltype(_impl_.trinkets_){0}
    , decltype(_impl_.currentsong_){0}
    , decltype(_impl_.companion_){0}
    , decltype(_impl_.lastsaved_){0}
    , decltype(_impl_.scmprogress_){0}
    , decltype(_impl_.frames_){0}
    , decltype(_impl_.seconds_){0}
    , decltype(_impl_.minutes_){0}
    , decltype(_impl_.showtargets_){false}
    , decltype(_impl_.supercrewmate_){false}
    , decltype(_impl_.finalmode_){false}
    , decltype(_impl_.finalstretch_){false}
    , decltype(_impl_.hours_){0}
    , decltype(_impl_.deathcounts_){0}
    , decltype(_impl_.totalflips_){0}
    , decltype(_impl_.hardestroomdeaths_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.teleportscript_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teleportscript_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hardestroom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hardestroom_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TSave::~TSave() {
  // @@protoc_insertion_point(destructor:TSave)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TSave::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.worldmap_.~RepeatedField();
  _impl_.flags_.~RepeatedField();
  _impl_.crewstats_.~RepeatedField();
  _impl_.collect_.~RepeatedField();
  _impl_.teleportscript_.Destroy();
  _impl_.hardestroom_.Destroy();
  _impl_.summary_.Destroy();
}

void TSave::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TSave::Clear() {
// @@protoc_insertion_point(message_clear_start:TSave)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worldmap_.Clear();
  _impl_.flags_.Clear();
  _impl_.crewstats_.Clear();
  _impl_.collect_.Clear();
  _impl_.teleportscript_.ClearToEmpty();
  _impl_.hardestroom_.ClearToEmpty();
  _impl_.summary_.ClearToEmpty();
  ::memset(&_impl_.savex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hardestroomdeaths_) -
      reinterpret_cast<char*>(&_impl_.savex_)) + sizeof(_impl_.hardestroomdeaths_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TSave::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool worldmap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_worldmap(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_worldmap(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_flags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_flags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool crewstats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_crewstats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_crewstats(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool collect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_collect(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_collect(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 savex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.savex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 savey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.savey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 saverx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.saverx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 savery = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.savery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 savegc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.savegc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 savedir = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.savedir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 savepoint = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.savepoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 trinkets = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.trinkets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 currentsong = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.currentsong_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool showtargets = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.showtargets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string teleportscript = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_teleportscript();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TSave.teleportscript"));
        } else
          goto handle_unusual;
        continue;
      // int32 companion = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.companion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lastsaved = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.lastsaved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool supercrewmate = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.supercrewmate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scmprogress = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.scmprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 frames = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seconds = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minutes = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hours = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 deathcounts = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.deathcounts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 totalflips = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.totalflips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hardestroom = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_hardestroom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TSave.hardestroom"));
        } else
          goto handle_unusual;
        continue;
      // int32 hardestroomdeaths = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.hardestroomdeaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool finalmode = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.finalmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool finalstretch = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.finalstretch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string summary = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_summary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TSave.summary"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TSave::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSave)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool worldmap = 1;
  if (this->_internal_worldmap_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_worldmap(), target);
  }

  // repeated bool flags = 2;
  if (this->_internal_flags_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_flags(), target);
  }

  // repeated bool crewstats = 3;
  if (this->_internal_crewstats_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_crewstats(), target);
  }

  // repeated bool collect = 4;
  if (this->_internal_collect_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_collect(), target);
  }

  // int32 savex = 5;
  if (this->_internal_savex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_savex(), target);
  }

  // int32 savey = 6;
  if (this->_internal_savey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_savey(), target);
  }

  // int32 saverx = 7;
  if (this->_internal_saverx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_saverx(), target);
  }

  // int32 savery = 8;
  if (this->_internal_savery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_savery(), target);
  }

  // int32 savegc = 9;
  if (this->_internal_savegc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_savegc(), target);
  }

  // int32 savedir = 10;
  if (this->_internal_savedir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_savedir(), target);
  }

  // int32 savepoint = 11;
  if (this->_internal_savepoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_savepoint(), target);
  }

  // int32 trinkets = 12;
  if (this->_internal_trinkets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_trinkets(), target);
  }

  // int32 currentsong = 13;
  if (this->_internal_currentsong() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_currentsong(), target);
  }

  // bool showtargets = 14;
  if (this->_internal_showtargets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_showtargets(), target);
  }

  // string teleportscript = 15;
  if (!this->_internal_teleportscript().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teleportscript().data(), static_cast<int>(this->_internal_teleportscript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TSave.teleportscript");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_teleportscript(), target);
  }

  // int32 companion = 16;
  if (this->_internal_companion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_companion(), target);
  }

  // int32 lastsaved = 17;
  if (this->_internal_lastsaved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_lastsaved(), target);
  }

  // bool supercrewmate = 18;
  if (this->_internal_supercrewmate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_supercrewmate(), target);
  }

  // int32 scmprogress = 19;
  if (this->_internal_scmprogress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_scmprogress(), target);
  }

  // int32 frames = 20;
  if (this->_internal_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_frames(), target);
  }

  // int32 seconds = 21;
  if (this->_internal_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_seconds(), target);
  }

  // int32 minutes = 22;
  if (this->_internal_minutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_minutes(), target);
  }

  // int32 hours = 23;
  if (this->_internal_hours() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_hours(), target);
  }

  // int32 deathcounts = 24;
  if (this->_internal_deathcounts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_deathcounts(), target);
  }

  // int32 totalflips = 25;
  if (this->_internal_totalflips() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_totalflips(), target);
  }

  // string hardestroom = 26;
  if (!this->_internal_hardestroom().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hardestroom().data(), static_cast<int>(this->_internal_hardestroom().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TSave.hardestroom");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_hardestroom(), target);
  }

  // int32 hardestroomdeaths = 27;
  if (this->_internal_hardestroomdeaths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_hardestroomdeaths(), target);
  }

  // bool finalmode = 28;
  if (this->_internal_finalmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_finalmode(), target);
  }

  // bool finalstretch = 29;
  if (this->_internal_finalstretch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_finalstretch(), target);
  }

  // string summary = 30;
  if (!this->_internal_summary().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TSave.summary");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_summary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSave)
  return target;
}

size_t TSave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSave)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool worldmap = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_worldmap_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool flags = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_flags_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool crewstats = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_crewstats_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool collect = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_collect_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string teleportscript = 15;
  if (!this->_internal_teleportscript().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teleportscript());
  }

  // string hardestroom = 26;
  if (!this->_internal_hardestroom().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hardestroom());
  }

  // string summary = 30;
  if (!this->_internal_summary().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary());
  }

  // int32 savex = 5;
  if (this->_internal_savex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_savex());
  }

  // int32 savey = 6;
  if (this->_internal_savey() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_savey());
  }

  // int32 saverx = 7;
  if (this->_internal_saverx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_saverx());
  }

  // int32 savery = 8;
  if (this->_internal_savery() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_savery());
  }

  // int32 savegc = 9;
  if (this->_internal_savegc() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_savegc());
  }

  // int32 savedir = 10;
  if (this->_internal_savedir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_savedir());
  }

  // int32 savepoint = 11;
  if (this->_internal_savepoint() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_savepoint());
  }

  // int32 trinkets = 12;
  if (this->_internal_trinkets() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trinkets());
  }

  // int32 currentsong = 13;
  if (this->_internal_currentsong() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentsong());
  }

  // int32 companion = 16;
  if (this->_internal_companion() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_companion());
  }

  // int32 lastsaved = 17;
  if (this->_internal_lastsaved() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_lastsaved());
  }

  // int32 scmprogress = 19;
  if (this->_internal_scmprogress() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_scmprogress());
  }

  // int32 frames = 20;
  if (this->_internal_frames() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_frames());
  }

  // int32 seconds = 21;
  if (this->_internal_seconds() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_seconds());
  }

  // int32 minutes = 22;
  if (this->_internal_minutes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_minutes());
  }

  // bool showtargets = 14;
  if (this->_internal_showtargets() != 0) {
    total_size += 1 + 1;
  }

  // bool supercrewmate = 18;
  if (this->_internal_supercrewmate() != 0) {
    total_size += 2 + 1;
  }

  // bool finalmode = 28;
  if (this->_internal_finalmode() != 0) {
    total_size += 2 + 1;
  }

  // bool finalstretch = 29;
  if (this->_internal_finalstretch() != 0) {
    total_size += 2 + 1;
  }

  // int32 hours = 23;
  if (this->_internal_hours() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_hours());
  }

  // int32 deathcounts = 24;
  if (this->_internal_deathcounts() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_deathcounts());
  }

  // int32 totalflips = 25;
  if (this->_internal_totalflips() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_totalflips());
  }

  // int32 hardestroomdeaths = 27;
  if (this->_internal_hardestroomdeaths() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_hardestroomdeaths());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TSave::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TSave::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TSave::GetClassData() const { return &_class_data_; }


void TSave::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TSave*>(&to_msg);
  auto& from = static_cast<const TSave&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSave)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.worldmap_.MergeFrom(from._impl_.worldmap_);
  _this->_impl_.flags_.MergeFrom(from._impl_.flags_);
  _this->_impl_.crewstats_.MergeFrom(from._impl_.crewstats_);
  _this->_impl_.collect_.MergeFrom(from._impl_.collect_);
  if (!from._internal_teleportscript().empty()) {
    _this->_internal_set_teleportscript(from._internal_teleportscript());
  }
  if (!from._internal_hardestroom().empty()) {
    _this->_internal_set_hardestroom(from._internal_hardestroom());
  }
  if (!from._internal_summary().empty()) {
    _this->_internal_set_summary(from._internal_summary());
  }
  if (from._internal_savex() != 0) {
    _this->_internal_set_savex(from._internal_savex());
  }
  if (from._internal_savey() != 0) {
    _this->_internal_set_savey(from._internal_savey());
  }
  if (from._internal_saverx() != 0) {
    _this->_internal_set_saverx(from._internal_saverx());
  }
  if (from._internal_savery() != 0) {
    _this->_internal_set_savery(from._internal_savery());
  }
  if (from._internal_savegc() != 0) {
    _this->_internal_set_savegc(from._internal_savegc());
  }
  if (from._internal_savedir() != 0) {
    _this->_internal_set_savedir(from._internal_savedir());
  }
  if (from._internal_savepoint() != 0) {
    _this->_internal_set_savepoint(from._internal_savepoint());
  }
  if (from._internal_trinkets() != 0) {
    _this->_internal_set_trinkets(from._internal_trinkets());
  }
  if (from._internal_currentsong() != 0) {
    _this->_internal_set_currentsong(from._internal_currentsong());
  }
  if (from._internal_companion() != 0) {
    _this->_internal_set_companion(from._internal_companion());
  }
  if (from._internal_lastsaved() != 0) {
    _this->_internal_set_lastsaved(from._internal_lastsaved());
  }
  if (from._internal_scmprogress() != 0) {
    _this->_internal_set_scmprogress(from._internal_scmprogress());
  }
  if (from._internal_frames() != 0) {
    _this->_internal_set_frames(from._internal_frames());
  }
  if (from._internal_seconds() != 0) {
    _this->_internal_set_seconds(from._internal_seconds());
  }
  if (from._internal_minutes() != 0) {
    _this->_internal_set_minutes(from._internal_minutes());
  }
  if (from._internal_showtargets() != 0) {
    _this->_internal_set_showtargets(from._internal_showtargets());
  }
  if (from._internal_supercrewmate() != 0) {
    _this->_internal_set_supercrewmate(from._internal_supercrewmate());
  }
  if (from._internal_finalmode() != 0) {
    _this->_internal_set_finalmode(from._internal_finalmode());
  }
  if (from._internal_finalstretch() != 0) {
    _this->_internal_set_finalstretch(from._internal_finalstretch());
  }
  if (from._internal_hours() != 0) {
    _this->_internal_set_hours(from._internal_hours());
  }
  if (from._internal_deathcounts() != 0) {
    _this->_internal_set_deathcounts(from._internal_deathcounts());
  }
  if (from._internal_totalflips() != 0) {
    _this->_internal_set_totalflips(from._internal_totalflips());
  }
  if (from._internal_hardestroomdeaths() != 0) {
    _this->_internal_set_hardestroomdeaths(from._internal_hardestroomdeaths());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TSave::CopyFrom(const TSave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSave::IsInitialized() const {
  return true;
}

void TSave::InternalSwap(TSave* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.worldmap_.InternalSwap(&other->_impl_.worldmap_);
  _impl_.flags_.InternalSwap(&other->_impl_.flags_);
  _impl_.crewstats_.InternalSwap(&other->_impl_.crewstats_);
  _impl_.collect_.InternalSwap(&other->_impl_.collect_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.teleportscript_, lhs_arena,
      &other->_impl_.teleportscript_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hardestroom_, lhs_arena,
      &other->_impl_.hardestroom_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.summary_, lhs_arena,
      &other->_impl_.summary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TSave, _impl_.hardestroomdeaths_)
      + sizeof(TSave::_impl_.hardestroomdeaths_)
      - PROTOBUF_FIELD_OFFSET(TSave, _impl_.savex_)>(
          reinterpret_cast<char*>(&_impl_.savex_),
          reinterpret_cast<char*>(&other->_impl_.savex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TSave::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mvvvvvvm_2eproto_getter, &descriptor_table_mvvvvvvm_2eproto_once,
      file_level_metadata_mvvvvvvm_2eproto[0]);
}

// ===================================================================

class PlayerStatus::_Internal {
 public:
};

PlayerStatus::PlayerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerStatus)
}
PlayerStatus::PlayerStatus(const PlayerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.rx_){}
    , decltype(_impl_.ry_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.vx_){}
    , decltype(_impl_.vy_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.tile_){}
    , decltype(_impl_.flip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flip_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flip_));
  // @@protoc_insertion_point(copy_constructor:PlayerStatus)
}

inline void PlayerStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.rx_){0}
    , decltype(_impl_.ry_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.vx_){0}
    , decltype(_impl_.vy_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.tile_){0}
    , decltype(_impl_.flip_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerStatus::~PlayerStatus() {
  // @@protoc_insertion_point(destructor:PlayerStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flip_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float vx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 dir = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.tile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 rx = 2;
  if (this->_internal_rx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_rx(), target);
  }

  // int32 ry = 3;
  if (this->_internal_ry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ry(), target);
  }

  // int32 x = 4;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_x(), target);
  }

  // int32 y = 5;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_y(), target);
  }

  // float vx = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_vx(), target);
  }

  // float vy = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_vy(), target);
  }

  // int32 dir = 8;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_dir(), target);
  }

  // int32 tile = 9;
  if (this->_internal_tile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_tile(), target);
  }

  // int32 flip = 10;
  if (this->_internal_flip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_flip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerStatus)
  return target;
}

size_t PlayerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 rx = 2;
  if (this->_internal_rx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rx());
  }

  // int32 ry = 3;
  if (this->_internal_ry() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ry());
  }

  // int32 x = 4;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 5;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // float vx = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    total_size += 1 + 4;
  }

  // float vy = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    total_size += 1 + 4;
  }

  // int32 dir = 8;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir());
  }

  // int32 tile = 9;
  if (this->_internal_tile() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tile());
  }

  // int32 flip = 10;
  if (this->_internal_flip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerStatus::GetClassData() const { return &_class_data_; }


void PlayerStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerStatus*>(&to_msg);
  auto& from = static_cast<const PlayerStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_rx() != 0) {
    _this->_internal_set_rx(from._internal_rx());
  }
  if (from._internal_ry() != 0) {
    _this->_internal_set_ry(from._internal_ry());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = from._internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    _this->_internal_set_vx(from._internal_vx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = from._internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    _this->_internal_set_vy(from._internal_vy());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  if (from._internal_tile() != 0) {
    _this->_internal_set_tile(from._internal_tile());
  }
  if (from._internal_flip() != 0) {
    _this->_internal_set_flip(from._internal_flip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerStatus::CopyFrom(const PlayerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatus::IsInitialized() const {
  return true;
}

void PlayerStatus::InternalSwap(PlayerStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerStatus, _impl_.flip_)
      + sizeof(PlayerStatus::_impl_.flip_)
      - PROTOBUF_FIELD_OFFSET(PlayerStatus, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mvvvvvvm_2eproto_getter, &descriptor_table_mvvvvvvm_2eproto_once,
      file_level_metadata_mvvvvvvm_2eproto[1]);
}

// ===================================================================

class MessageEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageEntity>()._impl_._has_bits_);
  static const ::TSave& tsave(const MessageEntity* msg);
  static void set_has_tsave(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PlayerStatus& ps(const MessageEntity* msg);
  static void set_has_ps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSave&
MessageEntity::_Internal::tsave(const MessageEntity* msg) {
  return *msg->_impl_.tsave_;
}
const ::PlayerStatus&
MessageEntity::_Internal::ps(const MessageEntity* msg) {
  return *msg->_impl_.ps_;
}
MessageEntity::MessageEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MessageEntity)
}
MessageEntity::MessageEntity(const MessageEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tsave_){nullptr}
    , decltype(_impl_.ps_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tsave()) {
    _this->_impl_.tsave_ = new ::TSave(*from._impl_.tsave_);
  }
  if (from._internal_has_ps()) {
    _this->_impl_.ps_ = new ::PlayerStatus(*from._impl_.ps_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:MessageEntity)
}

inline void MessageEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tsave_){nullptr}
    , decltype(_impl_.ps_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.type_){0}
  };
}

MessageEntity::~MessageEntity() {
  // @@protoc_insertion_point(destructor:MessageEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tsave_;
  if (this != internal_default_instance()) delete _impl_.ps_;
}

void MessageEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tsave_ != nullptr);
      _impl_.tsave_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ps_ != nullptr);
      _impl_.ps_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MessageType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .TSave tsave = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tsave(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerStatus ps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // .MessageType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .TSave tsave = 3;
  if (_internal_has_tsave()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tsave(this),
        _Internal::tsave(this).GetCachedSize(), target, stream);
  }

  // optional .PlayerStatus ps = 4;
  if (_internal_has_ps()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ps(this),
        _Internal::ps(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageEntity)
  return target;
}

size_t MessageEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSave tsave = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tsave_);
    }

    // optional .PlayerStatus ps = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ps_);
    }

  }
  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // .MessageType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageEntity::GetClassData() const { return &_class_data_; }


void MessageEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageEntity*>(&to_msg);
  auto& from = static_cast<const MessageEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MessageEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tsave()->::TSave::MergeFrom(
          from._internal_tsave());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ps()->::PlayerStatus::MergeFrom(
          from._internal_ps());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageEntity::CopyFrom(const MessageEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageEntity::IsInitialized() const {
  return true;
}

void MessageEntity::InternalSwap(MessageEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageEntity, _impl_.type_)
      + sizeof(MessageEntity::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(MessageEntity, _impl_.tsave_)>(
          reinterpret_cast<char*>(&_impl_.tsave_),
          reinterpret_cast<char*>(&other->_impl_.tsave_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mvvvvvvm_2eproto_getter, &descriptor_table_mvvvvvvm_2eproto_once,
      file_level_metadata_mvvvvvvm_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSave*
Arena::CreateMaybeMessage< ::TSave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSave >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerStatus*
Arena::CreateMaybeMessage< ::PlayerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageEntity*
Arena::CreateMaybeMessage< ::MessageEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MessageEntity >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
